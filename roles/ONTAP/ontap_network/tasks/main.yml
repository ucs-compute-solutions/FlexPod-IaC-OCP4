#Create iSCSI broadcast domain ports for Jumbo frames
- name: Create iSCSI broadcast domain ports with Jumbo frames
  na_ontap_broadcast_domain:  
    hostname: "{{inventory_hostname}}" 
    username: "{{username}}" 
    password: "{{password}}" 
    state: present 
    broadcast_domain: "{{item.name}}" 
    mtu: 9000 
    https: true 
    validate_certs: false
  with_items: 
    - "{{storage_vlans}}"
  when:
    - "('iscsi' in allowed_protocols)"
    - item.protocol == "iSCSI"
  tags:
    - ontap_iscsi_broadcast_domains

- name: Create NFS broadcast domain ports with Jumbo frames
  na_ontap_broadcast_domain:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: present
    broadcast_domain: "{{item.name}}"
    mtu: 9000
    https: true
    validate_certs: false
  with_items:
    - "{{storage_vlans}}"
  when:
    - "('nfs' in allowed_protocols)"
    - item.protocol == "NFS"
  tags:
    - ontap_nfs_broadcast_domain

# Create ifgroups for the data interfaces
- name: Create multimode/ LACP interface groups and add data ports
  na_ontap_net_ifgrp: 
    hostname: "{{inventory_hostname}}" 
    username: "{{username}}" 
    password: "{{password}}" 
    state: present 
    mode: "{{ifgrp_mode}}" 
    distribution_function: port 
    name: "{{ifgrp_name}}" 
    node: "{{item.node_name}}" 
    port: "{{item.ports}}" 
    https: true 
    validate_certs: false
  with_items: 
    - "{{node_data_ports}}"
  failed_when: ifgrp_mode == None or item.ports == []
  tags:
    - ontap_configure_ifgrp

# Modify the MTU of the data ifgroup to 9000
- name: Modify the MTU of the data ifgroup to 9000
  na_ontap_net_port: 
    hostname: "{{inventory_hostname}}" 
    username: "{{username}}" 
    password: "{{password}}" 
    state: present 
    node: "{{item.node_name}}" 
    port: "{{ifgrp_name}}" 
    mtu: 9000 
    https: true 
    validate_certs: false
  with_items: 
    - "{{node_data_ports}}"
  failed_when: item.node_name == None or item.node_name == ""
  tags:
    - ontap_ifgroup_mtu  

# Create iSCSI vlans
- name: Create the iSCSI vlans 
  na_ontap_net_vlan: 
    hostname: "{{inventory_hostname}}" 
    username: "{{username}}" 
    password: "{{password}}" 
    state: "{{item.3}}" 
    parent_interface: "{{item.2}}" 
    vlanid: "{{item.1.vlan_id}}" 
    node: "{{item.0.node_name}}" 
    https: true 
    validate_certs: false
  with_nested:
    - "{{node_data_ports}}"
    - "{{storage_vlans}}"
    - "{{ifgrp_name}}"
    - "{{ontap_vlan_state}}"
  failed_when: ontap_vlan_state != "present"
  when:
    - "('iscsi' in allowed_protocols)"
    - item.1.protocol == "iSCSI"
  tags:
    - ontap_vlan_interface

#Create NFS vlans
- name: Create the NFS vlans
  na_ontap_net_vlan: 
    hostname: "{{inventory_hostname}}" 
    username: "{{username}}" 
    password: "{{password}}" 
    state: "{{item.3}}" 
    parent_interface: "{{item.2}}" 
    vlanid: "{{item.1.vlan_id}}" 
    node: "{{item.0.node_name}}" 
    https: true 
    validate_certs: false
  with_nested:
    - "{{node_data_ports}}"
    - "{{storage_vlans}}"
    - "{{ifgrp_name}}"
    - "{{ontap_vlan_state}}"
  failed_when: ontap_vlan_state != "present"
  when:
    - "('nfs' in allowed_protocols)"
    - item.1.protocol == "NFS"
  tags:
    - ontap_vlan_interface

# Add the vlans to the correponding broadcast domains
- name: Adding iSCSI-A, iSCSI-B vlans to the corresponding broadcast domains
  na_ontap_broadcast_domain_ports: 
    hostname: "{{inventory_hostname}}" 
    username: "{{username}}" 
    password: "{{password}}" 
    state: present 
    broadcast_domain: "{{item.1.name}}" 
    ports: "{{item.0.node_name}}:a0a-{{item.1.vlan_id}}" 
    https: true 
    validate_certs: false
  with_nested:
    - "{{node_data_ports}}"
    - "{{storage_vlans}}"
  when: 
    - "('iscsi' in allowed_protocols)"
    - item.1.protocol == "iSCSI"
  tags:
    - ontap_vlan_interface

# Add the vlans to the correponding broadcast domains
- name: Adding NFS vlans to the corresponding broadcast domains
  na_ontap_broadcast_domain_ports: 
    hostname: "{{inventory_hostname}}" 
    username: "{{username}}" 
    password: "{{password}}" 
    state: present 
    broadcast_domain: "{{item.1.name}}" 
    ports: "{{item.0.node_name}}:a0a-{{item.1.vlan_id}}" 
    https: true 
    validate_certs: false
  with_nested:
    - "{{node_data_ports}}"
    - "{{storage_vlans}}"
  when:
    - "('nfs' in allowed_protocols)"
    - item.1.protocol == "NFS"
  tags:
    - ontap_vlan_interface

# Create management vlan interface
- name: Create the management vlan interface
  na_ontap_net_vlan:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: "{{item.3}}"
    parent_interface: "{{item.2}}"
    vlanid: "{{item.1.vlan_id}}"
    node: "{{item.0.node_name}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{node_data_ports}}"
    - "{{primary_vlans}}"
    - "{{ifgrp_name}}"
    - "{{ontap_vlan_state}}"
  failed_when: ontap_vlan_state != "present"
  when:
    - item.1.name == "management"
  tags:
    - ontap_vlan_interface

# Add the management vlan to default broadcast domain
- name: Adding management vlan to the default broadcast domain
  na_ontap_broadcast_domain_ports:
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    state: present
    broadcast_domain: Default
    ports: "{{item.0.node_name}}:a0a-{{item.1.vlan_id}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{node_data_ports}}"
    - "{{primary_vlans}}"
  when:
    - item.1.name == "management"
  tags:
    - ontap_vlan_interface
